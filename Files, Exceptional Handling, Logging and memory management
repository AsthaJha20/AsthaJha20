{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNBwj0wEvhBmN8VS0xrrqkM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AsthaJha20/AsthaJha20/blob/main/Files%2C%20Exceptional%20Handling%2C%20Logging%20and%20memory%20management\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "THEORITICAL QUESTION'S ANSWERS:-"
      ],
      "metadata": {
        "id": "dUEjCpQqrvh7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans1.Difference between Interpreted and compiled languages:\n",
        "- Interpreted Languages:\n",
        "These Languages are executed line by lineby an interpreter, e.g., Python, Ruby. The source code is not compiled into machine code beforehand.\n",
        "\n",
        "- Compiled Languages:\n",
        " These languages are transformed into machine code by a compiler before execution, e.g., C, C++. The resulting compiled code runs faster."
      ],
      "metadata": {
        "id": "TpKsduebiOvb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans2.Exceptional Handling in Python:\n",
        "Exception handling in Python is a mechanism to handle runtime errors (exceptions) in a controlled manner using the try, except, else, and finally blocks."
      ],
      "metadata": {
        "id": "ZvkT_CLjjTE7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans3. Purpose of the finally Block in Exception Handling:\n",
        "\n",
        "The finally block in Python is used to execute code that must run regardless of whether an exception occurs or not, such as cleaning up resources."
      ],
      "metadata": {
        "id": "uLDy_dBsjndE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans4.Logging in Python:\n",
        "\n",
        "Logging in Python is the practice of recording events, errors, or other information in your program to help track its execution and debug issues. The logging module allows developers to output logs with different levels of severity (e.g., DEBUG, INFO, WARNING, ERROR, CRITICAL)."
      ],
      "metadata": {
        "id": "OJgWtKtxkABX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans5.Significance of the _del_ Method in Python:\n",
        "\n",
        "The _del_ method is a destructor in Python, used to clean up resources when an object is about to be destroyed. It’s called when an object is deleted or goes out of scope."
      ],
      "metadata": {
        "id": "lf9tMHYqkhNT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans6.Difference Between import and from ... import in Python:\n",
        "\n",
        "Import Module: Imports the entire module, and you use module.name to access its functions or variables.\n",
        "\n",
        "From Module Import name: Imports only a specific function or class from a module directly, so you can use name without the module prefix."
      ],
      "metadata": {
        "id": "vGys2s2bk1wM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans7.Handling Multiple Exceptions in Python:\n",
        "\n",
        "You can handle multiple exceptions by chaining multiple except blocks or by catching multiple exceptions in a single except block using a tuple."
      ],
      "metadata": {
        "id": "sk2iCx4_lN8y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans8.Purpose of the with Statement When Handling Files in Python:\n",
        "\n",
        "The with statement automatically manages resources such as opening and closing files. It ensures that files are properly closed even if an exception occurs within the block."
      ],
      "metadata": {
        "id": "ixi1N8RXld9M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans9.Difference Between Multithreading and Multiprocessing:\n",
        "\n",
        "Multithreading: Involves running multiple threads within a single process, sharing memory space. Suitable for I/O-bound tasks.\n",
        "\n",
        "Multiprocessing: Involves running multiple processes, each with its own memory space. It is more suited for CPU-bound tasks."
      ],
      "metadata": {
        "id": "KAe_Wd2jlpdE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans10.Advantages of Using Logging in a Program:\n",
        "\n",
        "Logging provides an effective way to record events, debug issues, track application behavior, and monitor performance. It is more flexible than using print statements."
      ],
      "metadata": {
        "id": "ImBVnZsumHYj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans11.Memory Management in Python:\n",
        "\n",
        "Memory management in Python is handled by Python’s memory manager, which includes features like automatic memory allocation and garbage collection."
      ],
      "metadata": {
        "id": "AXbTc_GjmOqe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans12.The basic steps for exception handling in Python are:\n",
        "\n",
        "Try Block:\n",
        "You write the code that might raise an exception inside the try block.\n",
        "\n",
        "Except Block: After the try block, the except block is used to handle the exception if it occurs. You can specify different types of exceptions to handle different error scenarios.\n",
        "\n",
        "Else Block (optional): If no exception occurs in the try block, the code in the else block is executed.\n",
        "\n",
        "Finally Block (optional): Code in the finally block is always executed, regardless of whether an exception occurred or not. It is commonly used for cleanup operations (e.g., closing files)."
      ],
      "metadata": {
        "id": "jBaR4PUNmzeS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans13.Memory management is important in Python to prevent resource exhaustion, ensure efficient execution, and avoid memory leaks. Python uses automatic memory management and garbage collection, but poor memory handling can still lead to issues like high memory consumption or memory leaks if objects are not freed properly."
      ],
      "metadata": {
        "id": "t2Vs4cdpnEyO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans14.Try and except are used to catch and handle exceptions in Python. Code that may raise an exception is placed inside the try block, and if an exception occurs, the corresponding except block is executed to handle the exception, preventing the program from crashing."
      ],
      "metadata": {
        "id": "ZQJWWJt8nS8k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans15.Python uses automatic memory management, which includes a garbage collection system that tracks objects' reference counts. When objects are no longer referenced, the memory is automatically freed. Python’s gc module helps to identify and collect cyclic references, preventing memory leaks."
      ],
      "metadata": {
        "id": "zHPff7Ucnjrn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans16.The else block in exception handling runs if no exception is raised in the try block. It is useful for executing code that should only run when the try block succeeds and no exceptions occur."
      ],
      "metadata": {
        "id": "5mvLTPq8nz4x"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans17.The logging module defines several levels to categorize the severity of messages:\n",
        "\n",
        "DEBUG: Detailed debugging information.\n",
        "\n",
        "INFO: Informational messages about the general progress of the program.\n",
        "\n",
        "WARNING: Indication of something unexpected, but not an error.\n",
        "\n",
        "ERROR: A serious issue that prevents part of the program from functioning.\n",
        "\n",
        "CRITICAL: A very serious error that may cause the program to terminate."
      ],
      "metadata": {
        "id": "UIRncrSpnzqt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans18.os.fork() creates a new child process by duplicating the calling process (specific to Unix-like systems). It is a low-level operation.\n",
        "\n",
        "The multiprocessing module provides a higher-level interface for creating and managing separate processes, which works across different platforms. It handles process synchronization, communication, and offers a cleaner way to implement parallelism."
      ],
      "metadata": {
        "id": "m-PoO-oUnzW1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans19.Closing a file ensures that all changes are written to the file and that system resources (like file handles) are properly released. Not closing a file may result in memory leaks, file locking issues, or incomplete data writes."
      ],
      "metadata": {
        "id": "CHqnLBXboJS_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans20.file.read() reads the entire content of the file as a single string.\n",
        "\n",
        "file.readline() reads one line at a time from the file, returning it as a string. This is useful when processing large files line by line."
      ],
      "metadata": {
        "id": "idvj-Fu2oJLp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans21.The logging module is used for recording log messages that help in tracking the behavior of the program, debugging, and monitoring its runtime state. It allows for different log levels, customizable output formats, and writing logs to various destinations like the console or log files."
      ],
      "metadata": {
        "id": "hNYEJLumoI7K"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans22.The os module provides functions to interact with the operating system, including file handling operations like creating, deleting, or renaming files. It also provides tools for working with file paths (e.g., checking file existence, joining paths)."
      ],
      "metadata": {
        "id": "shWqfnfQoI3y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans23.Challenges in Python's memory management include:\n",
        "\n",
        "Circular references:   Objects that reference each other in a cycle may not be automatically freed by reference counting, leading to memory leaks.\n",
        "\n",
        "High memory usage:   Inefficient data structures or poor algorithm design can lead to excessive memory consumption.\n",
        "\n",
        "Delayed garbage collection:   Python’s garbage collector may not immediately reclaim memory, potentially causing temporary memory bloat."
      ],
      "metadata": {
        "id": "iQud12CtoIt5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans24.You can raise an exception using the raise keyword. For example:\n",
        "\n",
        "raise ValueError(\"This is a custom error message\")\n",
        "\n"
      ],
      "metadata": {
        "id": "7Rh3HXrsoIou"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ans25.Multithreading allows for concurrent execution of tasks in a program. It is particularly useful for I/O-bound tasks (e.g., network requests or file I/O) where the program spends time waiting. Multithreading helps to improve performance and responsiveness, as it allows one thread to handle I/O operations while others perform computations. However, for CPU-bound tasks, the multiprocessing module is often more appropriate due to Python’s Global Interpreter Lock (GIL)."
      ],
      "metadata": {
        "id": "rgdDVbAloIiY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "PRACTICAL QUESTION'S ANSWERS:-\n"
      ],
      "metadata": {
        "id": "L3mAbYJloIVZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans1.Open a file for writing and write a string to it:\n",
        "with open('file.txt', 'w') as file:\n",
        "    file.write(\"This is a string written to the file.\")"
      ],
      "metadata": {
        "id": "Kej6ZglWs05P"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans2.Read the contents of a file and print each line:\n",
        "with open('file.txt', 'r') as file:\n",
        "    for line in file:\n",
        "        print(line)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "boo24eLetkTf",
        "outputId": "1e9302b3-ec03-410c-acab-03bea191f364"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is a string written to the file.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans3.Handle a case where the file doesn't exist while trying to open it for reading:\n",
        "try:\n",
        "    with open('non_existent_file.txt', 'r') as file:\n",
        "        content = file.read()\n",
        "except FileNotFoundError:\n",
        "    print(\"File does not exist.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8cl2oEtHuIaq",
        "outputId": "615ff9ba-6370-418b-836d-63ad933f2732"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "File does not exist.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans4.Read from one file and write its content to another file:\n",
        "with open('source.txt', 'r') as source_file:\n",
        "    content = source_file.read()\n",
        "with open('destination.txt', 'w') as dest_file:\n",
        "    dest_file.write(content)"
      ],
      "metadata": {
        "id": "S0nj2q3DvOh5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans5.Catch and handle division by zero error:\n",
        "try:\n",
        "    result = 10 / 0\n",
        "except ZeroDivisionError:\n",
        "    print(\"Cannot divide by zero.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g5hXv1_HuqLf",
        "outputId": "17e30c03-2f46-4ca0-cd48-036c54b37791"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cannot divide by zero.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans6.Log an error message to a log file when a division by zero exception occurs:\n",
        "import logging\n",
        "\n",
        "logging.basicConfig(filename='app.log', level=logging.ERROR)\n",
        "try:\n",
        "    result = 10 / 0\n",
        "except ZeroDivisionError as e:\n",
        "    logging.error(\"Division by zero occurred: %s\", e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hxqNPOHcu8b1",
        "outputId": "97b0500a-9067-4d60-cb5c-be3a7a468c48"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:root:Division by zero occurred: division by zero\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans7.Log information at different levels (INFO, ERROR, WARNING):\n",
        "import logging\n",
        "\n",
        "logging.basicConfig(level=logging.DEBUG)\n",
        "logging.debug('This is a debug message')\n",
        "logging.info('This is an info message')\n",
        "logging.warning('This is a warning message')\n",
        "logging.error('This is an error message')\n",
        "logging.critical('This is a critical message')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cs83ZIGMvpyU",
        "outputId": "0464027c-8639-4e4e-beea-efb6f2a74277"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:root:This is a warning message\n",
            "ERROR:root:This is an error message\n",
            "CRITICAL:root:This is a critical message\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans8.Handle a file opening error using exception handling:\n",
        "try:\n",
        "    with open('non_existent_file.txt', 'r') as file:\n",
        "        content = file.read()\n",
        "except FileNotFoundError as e:\n",
        "    print(f\"Error opening file: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "adalmgP_v8p8",
        "outputId": "cd066de3-9a1d-46f0-ca2d-36fb57ccd67d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error opening file: [Errno 2] No such file or directory: 'non_existent_file.txt'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans9.Read a file line by line and store its content in a list:\n",
        "with open('file.txt', 'r') as file:\n",
        "    lines = file.readlines()\n",
        "print(lines)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CGDEparjwLEV",
        "outputId": "9abd17c6-fa40-4a06-b643-9713f47c021c"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['This is a string written to the file.']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans10.Append data to an existing file:\n",
        "with open('file.txt', 'a') as file:\n",
        "    file.write(\"Appended content\\n\")"
      ],
      "metadata": {
        "id": "GM4YvEx_wZM3"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans11.Handle an error when attempting to access a dictionary key that doesn't exist:\n",
        "my_dict = {'key1': 'value1'}\n",
        "try:\n",
        "    value = my_dict['key2']\n",
        "except KeyError:\n",
        "    print(\"Key does not exist.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ng5OwUqvwv27",
        "outputId": "99eba6b5-9068-4220-89bd-1079c0b14f65"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Key does not exist.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans12.Demonstrate using multiple except blocks to handle different types of exceptions:\n",
        "try:\n",
        "    # some code that may raise different exceptions\n",
        "    x = 10 / 0\n",
        "except ZeroDivisionError:\n",
        "    print(\"Cannot divide by zero.\")\n",
        "except ValueError:\n",
        "    print(\"Invalid value.\")\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ffCjEnjAxHDn",
        "outputId": "c662bfb1-ad40-4fa5-bbb7-3f704ac7e41b"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cannot divide by zero.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans13.Check if a file exists before attempting to read it:\n",
        "import os\n",
        "\n",
        "if os.path.exists('file.txt'):\n",
        "    with open('file.txt', 'r') as file:\n",
        "        content = file.read()\n",
        "else:\n",
        "    print(\"File does not exist.\")"
      ],
      "metadata": {
        "id": "wutrk9awxvoj"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans14.Log both informational and error messages:\n",
        "import logging\n",
        "\n",
        "logging.basicConfig(level=logging.DEBUG)\n",
        "logging.info('This is an info message')\n",
        "logging.error('This is an error message')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zS0SIC1-yA5M",
        "outputId": "0dc1ec02-672f-452d-f7df-6d5df735db36"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:root:This is an error message\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans15.Print the content of a file and handle the case when the file is empty:\n",
        "try:\n",
        "    with open('file.txt', 'r') as file:\n",
        "        content = file.read()\n",
        "        if not content:\n",
        "            print(\"The file is empty.\")\n",
        "        else:\n",
        "            print(content)\n",
        "except FileNotFoundError:\n",
        "    print(\"File does not exist.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_JUgmVugySBg",
        "outputId": "30884314-0f6f-462c-a585-d0c180490900"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is a string written to the file.Appended content\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans16.Use memory profiling to check the memory usage of a small program:\n",
        "import memory_profiler\n",
        "\n",
        "@memory_profiler.profile\n",
        "def my_function():\n",
        "    x = [i for i in range(100000)]\n",
        "    return x\n",
        "\n",
        "my_function()\n",
        "!pip install matplotlib-venn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "ueKrK2ACyn6Y",
        "outputId": "a40a5be7-1618-4abf-c6c8-648710eba891"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'memory_profiler'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-fd161eaf773a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Ans16.Use memory profiling to check the memory usage of a small program:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mmemory_profiler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0mmemory_profiler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprofile\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmy_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'memory_profiler'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Ans17.Create and write a list of numbers to a file, one number per line:\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "with open('numbers.txt', 'w') as file:\n",
        "    for number in numbers:\n",
        "        file.write(f\"{number}\\n\")"
      ],
      "metadata": {
        "id": "OaY6AKCTzzO7"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans18.Implement a basic logging setup that logs to a file with rotation after 1MB:\n",
        "import logging\n",
        "from logging.handlers import RotatingFileHandler\n",
        "\n",
        "handler = RotatingFileHandler('app.log', maxBytes=1e6, backupCount=3)\n",
        "logging.basicConfig(level=logging.INFO, handlers=[handler])\n",
        "\n",
        "logging.info(\"This is a log message.\")"
      ],
      "metadata": {
        "id": "-sGXCSHM0NBp"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans19. Handle both IndexError and KeyError using a try-except block:\n",
        "try:\n",
        "    my_list = [1, 2, 3]\n",
        "    print(my_list[5])\n",
        "    my_dict = {'key1': 'value1'}\n",
        "    print(my_dict['key2'])\n",
        "except IndexError:\n",
        "    print(\"Index out of range.\")\n",
        "except KeyError:\n",
        "    print(\"Key not found.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yMrOOxb30eB0",
        "outputId": "149dc4a7-e5e7-420d-e9a3-f084daf71414"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index out of range.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans20.Open a file and read its contents using a context manager:\n",
        "with open('file.txt', 'r') as file:\n",
        "    content = file.read()\n",
        "print(content)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "19F9xSnP0s8o",
        "outputId": "5bbc1f06-0a8e-45cb-f02a-043522c485fc"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is a string written to the file.Appended content\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans21.Read a file and print the number of occurence of a specific word:\n",
        "word_to_search = 'hello'\n",
        "with open('file.txt', 'r') as file:\n",
        "    content = file.read()\n",
        "occurrences = content.lower().count(word_to_search.lower())\n",
        "print(f\"'{word_to_search}' occurs {occurrences} times.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mJkJ8dyr0-Xx",
        "outputId": "635b9d94-18f2-4182-ee87-6f97743c0bec"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'hello' occurs 0 times.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans22.Check if a file is empty before attempting to read its contents:\n",
        "import os\n",
        "\n",
        "if os.path.exists('file.txt') and os.stat('file.txt').st_size > 0:\n",
        "    with open('file.txt', 'r') as file:\n",
        "        content = file.read()\n",
        "    print(content)\n",
        "else:\n",
        "    print(\"File is empty or does not exist.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Suna2Dzw1S5v",
        "outputId": "dff95349-10ec-440e-94ba-63530287e7c0"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is a string written to the file.Appended content\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ans23.Write to a log file when an error occurs during file handling:\n",
        "import logging\n",
        "\n",
        "logging.basicConfig(filename='file_errors.log', level=logging.ERROR)\n",
        "try:\n",
        "    with open('non_existent_file.txt', 'r') as file:\n",
        "        content = file.read()\n",
        "except Exception as e:\n",
        "    logging.error(f\"Error opening file: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fki0ZyhF1cdu",
        "outputId": "c5820aa6-533c-4c18-f9db-b23be22e7b1c"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:root:Error opening file: [Errno 2] No such file or directory: 'non_existent_file.txt'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "HcfMfMcZ186G"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}